- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const isLabels = (str) => str === 'labels'
- const getName = (entity) => entity.name ?? `${entity.firstName} ${entity.lastName}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {}, labelText, tag = 'input', selectOptionsPropertyName)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - inputName = getInputName(propertyName)
  - inputValue = _.get(entity, propertyName, '')
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelText
    case tag
      when 'input'
        input(
          id= inputId
          name= inputName
          class= classLine
          value= inputValue
        )&attributes(attributes)
      when 'textarea'
        textarea(
          id= inputId
          name= inputName
          class= classLine
        )&attributes(attributes)= inputValue
      when 'select'
        select(
          id= inputId
          name= inputName
          class= classLine
        )&attributes(attributes)
          unless isLabels(propertyName)
            option      
          each item in _.get(entity, selectOptionsPropertyName, [])
            option(
              value= item.id
              selected= !isLabels(propertyName) && (item.id == entity[propertyName])
            )= getName(item)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-success' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
