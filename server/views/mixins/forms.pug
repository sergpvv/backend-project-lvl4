- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const isTextArea = (tag) => tag === 'textarea'

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin options(entity, propertyName)
  - entries = _.get(entity, propertyName)
  each [id, name] in entries
    option(value=`${id}`)= name

mixin input(entity, propertyName, errors = {}, labelText, tag = 'input')
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelText
    #{tag}(
      id= inputId
      name= getInputName(propertyName)
      class= classLine
      unless isTextArea(tag)
        value= _.get(entity, propertyName, '')
    )&attributes(attributes)= 
      case tag
        when 'input'
          - break
        when 'textarea'
          _.get(entity, propertyName, '')
        when 'select'
          +options(entity, propertyName)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-success' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
